{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#netbox-circuit-maintenance-plugin","title":"Netbox Circuit Maintenance Plugin","text":"<p>Documentation: https://jasonyates.github.io/netbox-circuitmaintenance/</p> <p>A NetBox plugin built to track circuit maintenance events, the plugin itself is agnostic in that it is only built to store data surrounding maintenance events and provide an overview of historical, active and upcoming circuit and provider maintenance events. The plugin tracks maintenance events at the provider level and associates impact from each event at the circuit level.</p> <p>The plugin does not directly provide an automated approach to ingesting provider notifications, instead it extends NetBox's extensive REST API and provides GET/POST/PUT/PATCH methods to manage maintenance events. The plugin is intended to be coupled with an automated parser to handle the parsing of provider notifications and the delivery of the maintenance events to the plugin's REST API. Several example parsers have been documented here.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Track provider maintenance events</li> <li>Track circuit impact from provider maintenance</li> <li>Provides a consolidated view of active, upcoming and historical maintenance events at the provider and circuit level</li> <li>Consolidated notifications (coming soon)</li> <li>Maintenance overlap detection (coming soon)</li> </ul>"},{"location":"#compatibility","title":"Compatibility","text":"<p>This plugin is only supported on NetBox 3.4 or higher, for exact compatibility information, see the table below. | NetBox Version | Plugin Version | |--|--| | 4.0+ | 0.4.2 | | 3.5 | 0.3.0 | | 3.4 | 0.2.2 |</p>"},{"location":"#installing","title":"Installing","text":"<p>A working installation of Netbox 3.4+ is required - see official documentation.</p>"},{"location":"#package-installation","title":"Package Installation","text":"<p>Activate your virtual env and install via pip::</p> <pre><code>$ source /opt/netbox/venv/bin/activate\n(venv) $ pip install netbox-circuitmaintenance\n</code></pre> <p>To ensure the Netbox Documents plugin is automatically re-installed during future upgrades, add the package to your <code>local_requirements.txt</code> :</p> <pre><code># echo netbox-circuitmaintenance &gt;&gt; local_requirements.txt\n</code></pre>"},{"location":"#enable-the-plugin","title":"Enable the Plugin","text":"<p>In the Netbox <code>configuration.py</code> configuration file add or update the PLUGINS parameter, adding <code>netbox_documents</code>:</p> <pre><code>PLUGINS = [\n    'netbox_circuitmaintenance'\n]\n\nPLUGINS_CONFIG = {\n    \"netbox_circuitmaintenance\": {},\n}\n</code></pre>"},{"location":"#apply-database-migrations","title":"Apply Database Migrations","text":"<p>Apply database migrations with Netbox <code>manage.py</code>:</p> <pre><code>(venv) $ python manage.py migrate\n</code></pre>"},{"location":"#restart-netbox","title":"Restart Netbox","text":"<p>Restart the Netbox service to apply changes:</p> <pre><code>sudo systemctl restart netbox\n</code></pre>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#credits","title":"Credits","text":"<p>Based on the NetBox plugin tutorial:</p> <ul> <li>demo repository</li> <li>tutorial</li> </ul> <p>This package was created with Cookiecutter and the <code>netbox-community/cookiecutter-netbox-plugin</code> project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#042-2024-09-29","title":"0.4.2 (2024-09-29)","text":"<ul> <li>Adding Maintenance calendar widget</li> <li>Fix #26 - f string quote issue with NB 4.1</li> </ul>"},{"location":"changelog/#041-2024-09-19","title":"0.4.1 (2024-09-19)","text":"<ul> <li>Adding Maintenance Schedule calendar</li> </ul>"},{"location":"changelog/#040-2024-09-19","title":"0.4.0 (2024-09-19)","text":"<ul> <li>Adds support for Netbox 4.0 and 4.1</li> <li>Adds widget to show circuit maintenance events</li> <li>Updates styling to match new Netbox style</li> </ul>"},{"location":"changelog/#030-2023-04-28","title":"0.3.0 (2023-04-28)","text":"<ul> <li>Fixed support for Netbox 3.5. NOTE: Plugin version 0.3.0+ is only compatible with Netbox 3.5+</li> </ul>"},{"location":"changelog/#022-2023-01-18","title":"0.2.2 (2023-01-18)","text":"<ul> <li>Fix API Filtersets</li> <li>Viewing notification content opens a new tab</li> <li>Updating RESCHEDULED to RE-SCHEDULED to match circuitparser</li> </ul>"},{"location":"changelog/#021-2023-01-17","title":"0.2.1 (2023-01-17)","text":"<ul> <li>Updating to DynamicModelChoiceField</li> <li>Hiding maintenance schedule for now</li> </ul>"},{"location":"changelog/#010-2023-01-15","title":"0.1.0 (2023-01-15)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/jasonyates/netbox_circuitmaintenance/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Netbox Circuit Maintenance Plugin could always use more documentation, whether as part of the official Netbox Circuit Maintenance Plugin docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/jasonyates/netbox_circuitmaintenance/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>netbox_circuitmaintenance</code> for local development.</p> <ol> <li>Fork the <code>netbox_circuitmaintenance</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/netbox_circuitmaintenance.git\n</code></pre> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install -E test -E doc -E dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check    https://github.com/jasonyates/netbox_circuitmaintenance/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"parsers/","title":"Using a parser","text":"<p>Parsers are designed to take the incoming email notifications from carriers and parse them in to a machine readable JSON format which can then be passed to the circuit maintenance plugin API for storage and further processing. The challenge is that virtually every provider leverages their own maintenance notification format with very little uptake of industry standards, the circuit-maintenance-parser python package was written to convert both standard based iCal notifications and non-standard HTML based notifications in to a well defined structure.</p> <p>The high level process is simple, a parser leverages the  circuit-maintenance-parser library to parse inbound notifications, passing them to the NetBox Circuit Maintenance plugin, the plugin then stores and optionally post-processes the notification (i.e. duplication detection, consolidated notifications).</p> <p>The following parsers have been written and/or contributed by the community to assist in automating provider maintenance notifications:</p> <ul> <li> <p>AWS SNS &amp; Lambda</p> </li> <li> <p>IMAP Netbox Script (Coming Soon)</p> </li> <li> <p>IMAP CRON Job (Coming Soon)</p> </li> </ul>"},{"location":"parsers_sns_lambda/","title":"AWS SNS & Lambda","text":"<p>This parser leverages a server-less design for near-realtime processing of provider notifications via AWS Simple Email Service, S3 &amp; Lambda to receive, parse and push maintenance events to NetBox. </p> <p>Pricing for the deployment will vary based on the volume of emails processed per month however in testing it is feasible to operate this solution for under $1/mo with less than 1000 emails/mo.</p>"},{"location":"parsers_sns_lambda/#requirements","title":"Requirements","text":"<p>Amazon AWS Simple Email Service Amazon AWS Lambda Amazon AWS S3 Connectivity from your VPC hosting the Lambda function to Netbox.</p> <p>Note: The basic setup of verifying your domain and publishing MX records to allow SES to receive email on behalf of your domain is not covered in this guide, please see Setting up Amazon SES email receiving.</p> <p>Note: Your Lambda function either needs to be in the same VPC as Netbox, have connectivity to Netbox over the internet, or have private connectivity to Netbox via Direct Connect etc.</p> <p>Note: You will need to inform any relevant circuit providers to send maintenance notifications to the email address you configure to be processed by SES. This guide does not cover that process.</p>"},{"location":"parsers_sns_lambda/#flow-diagram","title":"Flow Diagram","text":"<ol> <li>Provider sends email notification to email address configured for receiving email in AWS SES</li> <li>SES stores the raw email as S3 object</li> <li>SES triggers Lambda function and passes email headers</li> <li>Lambda function retrieves raw email from S3, performs validation of the provider and parses it using circuit_maintenance_parser</li> <li>Maintenance event is passed to NetBox for storage and further processing </li> </ol>"},{"location":"parsers_sns_lambda/#aws-setup","title":"AWS Setup","text":"<p>The following steps will guide you through creating a Lambda function, giving it permission to read from an S3 bucket along with VPC access (if required), creating the SES rules to pass emails to Lambda and the creation of an S3 bucket to store incoming email.</p> <p>Step 1 - Navigate to Lambda -&gt; Create Function to create a new Lambda function to host the email parser. 1. Enter a name for the Lambda function &amp; select Python 3.9 as the runtime.  2. Under Advanced Settings, enable VPC access. (If required) 3. Select the VPC, 2 or more relevant subnets from your VPC and an appropriate security group. 4. Click Create function 5. Once created, navigate to Configuration -&gt; Permissions to find the IAM role that was automatically created. Click the role name to launch the IAM tool. 6. Navigate to Add Permissions -&gt; Attach Policies and select AmazonS3ReadOnlyAccess and click Attach Policy </p> <p>Step 2 - Navigate to Simple Email Service -&gt; Email receiving and create a rule set.</p> <p></p> <ol> <li>Within the rule set you just created, create a new rule.</li> <li>Enter a name for the rule, ensure it is Enabled. Leave security options as default.</li> <li>Add new recipient condition - enter the email address you wish to use to receive email. You must have previously verified your domain with SES and setup MX records.</li> <li>Add new action -&gt; Deliver to S3 bucket. You can specify an existing bucket or have SES create a new one for you.</li> <li>Add new action -&gt; Invoke AWS Lambda function. Select the Lambda function you created in Step 1. Ensure invocation type is set to Event Invocation which will trigger the Lambda function as each email is received. </li> <li>Click Next followed by Create Rule. Allow AWS to create the relevant IAM permissions for SES to access the Lambda function.</li> </ol> <p>Step 3 - Update S3 bucket to disable public access (if required)</p> <p>If you allowed SES to create the S3 bucket automatically, it creates the bucket with public access enabled, this is not recommended or required for this deployment and should be disabled.</p> <ol> <li>Navigate to S3 -&gt; Select your bucket that was created.</li> <li>Click Permissions and under Block Public Access select Edit. </li> <li>Select Block all public access &amp; Save Changes </li> </ol>"},{"location":"parsers_sns_lambda/#lambda-deployment","title":"Lambda Deployment","text":"<p>Due to how Lambda operates in an ephemeral environment, there is no means to install packages from pip on each invocation of the Lambda function, as a result you have to build the Lambda function locally and create a zip file containing the function and all required python modules. The following steps will guide you through configuring the python script for your environment, building the package and uploading it to the Lambda function.</p> <p>If you haven't already, use git to checkout a copy of the netbox-circuitmaintenance git repository. </p> <p>Step 1 - Configure variables</p> <ol> <li>Navigate to <code>parsers/aws-sns-lambda/</code></li> <li>Edit lambda_function.py and configure the following variables as relevant for your environment <pre><code>S3_BUCKET_NAME  =  'your-s3-bucket'\nNB_URL  =  'https://netbox.yourdomain.com'\nNB_API_TOKEN  =  'yournetboxtokenhere'\nS3_DELETE_UNKNOWN  =  False # Delete non-provider matched emails from the S3 bucket\nS3_DELETE_PROCESSED  =  False # Delete provder matched emails from the S3 bucket after processing\n</code></pre></li> </ol> <p>Step 2 - Build lambda deployment package</p> <p>A bash script is included with the python code that creates a local virtual environment, collects the required python modules and creates a .zip file that can be uploaded to Lambda. To execute the bash script do the following</p> <ol> <li><code>chmod +x create_pkg.sh</code> </li> <li><code>./create_pkg.sh</code></li> </ol> <p>Example: <pre><code>Executing create_pkg.sh...\ncreated virtual environment CPython3.9.6.final.0-64 in 762ms\nInstalling dependencies...\nFrom: requirements.txt file exists...\n......\nRemoving virtual environment folder...\nFinished script execution!\n</code></pre></p> <p>After execution has finished, you will be left with a zip archive <code>lambda_package.zip</code> that can be uploaded to your AWS Lambda function.</p> <p>Step 3 - Upload the package to Lambda</p> <ol> <li>Navigate to Lambda -&gt; Your function - &gt; Code</li> <li>Under Upload From select .zip </li> <li>Upload the zip archive created</li> </ol>"},{"location":"parsers_sns_lambda/#troubleshooting","title":"Troubleshooting","text":"<p>Email's are not received by SES This guide does not cover the setup of SES and creation of MX records etc. Please refer to AWS troubleshooting guides for SES. If SES is setup correctly, each email sent to SES will create a new S3 object.</p> <p>Lambda is not processing emails received by SES If you are correctly receiving email and SES is storing them in S3, review the CloudWatch logs for your Lambda function to confirm that Lambda is correctly invoking your function each time an email is received. The cloudwatch logs will show any errors generated by the python script.</p> <p>Timeout in connection to Netbox Validate your Lambda function has connectivity to Netbox, if Netbox is hosted in AWS or within your network, the function must have VPC permissions enabled and must have network connectivity to Netbox. </p> <p>Building from an M1 Mac If you are using an M1 Mac to build the Lambda package, some dependencies compile a binary which will not work on an x86 based Lambda function. Either build the package on an x86 based machine or re-create the Lambda function and choose arm as the environment type.</p>"}]}